INFO: Lexing "D:\Dropbox\_PeterCpp\[min]mod\Example programs\program.[m]m" ...
Moving the contents of "D:\Dropbox\_PeterCpp\[min]mod\Example programs\program.[m]m" to a string ...
DEBUG: "D:\Dropbox\_PeterCpp\[min]mod\Example programs\program.[m]m":
"-- DEF -- define only element in second from the top stack to list of instructions in top
-- POP -- pop top value of stack
-- NEQ -- if top of stack equals second from the top (pop both), execute next instruction
-- SWP -- swap top two elements in stack
-- [...] -- push list of instructions
-- -- space between all instructions
-- -- instructions are popped when executed
--
-- [@] [[] [@] [] DEF] DEF -- @ pushes empty stack first time it's called, then does nothing

-- REVISION:
-- [...] -- stack of instructions
-- A. -- push instruction A rather than pushing onto DS
-- [...] A SET -- set variable A to stack of instructions
-- A B MOVE -- push A onto B, pop twice
-- A IF -- pop twice if A is an empty stack, otherwise once
-- Program is a reversed stack
-- EXAMPLES:
-- [[] IF.] pop. SET
-- [DS.] ds_stack. SET
-- [ds_stack. DS. SET pop DS. SET] pop_ds. SET
-- [ds_stack. DS. SET [] DS. SET] push_ds. SET
-- [DS. old_ds. SET DS. SET DS. IS. MOVE old_ds. DS. SET] with. SET
[DS. old_ds. SET push_ds. 1. []. DS. new_ds. SET old_ds. DS. SET new_ds. MOVE new_ds. DS. SET IF. old_ds. MOVE pop_ds]. not. SET

-- [min]mod
-- min::mod
-- min\mod\
-- (minmod)"

INFO: Converting string to list of tokens ...
Removing all WHITESPACE tokens from list (length 116) ...
Removing all COMMENT tokens from list (length 68) ...
DEBUG: Tokens in "D:\Dropbox\_PeterCpp\[min]mod\Example programs\program.[m]m":

1	
2	
3	
4	
5	
6	
7	
8	
9	
10	
11	
12	
13	
14	
15	
16	
17	
18	
19	
20	
21	
22	
23	
24	STACK OPEN, INSTRUCTION (DS), INDIRECTION (1), INSTRUCTION (old_ds), INDIRECTION (1), INSTRUCTION (SET), INSTRUCTION (push_ds), INDIRECTION (1), INSTRUCTION (1), INDIRECTION (1), STACK OPEN, STACK CLOSE, INDIRECTION (1), INSTRUCTION (DS), INDIRECTION (1), INSTRUCTION (new_ds), INDIRECTION (1), INSTRUCTION (SET), INSTRUCTION (old_ds), INDIRECTION (1), INSTRUCTION (DS), INDIRECTION (1), INSTRUCTION (SET), INSTRUCTION (new_ds), INDIRECTION (1), INSTRUCTION (MOVE), INSTRUCTION (new_ds), INDIRECTION (1), INSTRUCTION (DS), INDIRECTION (1), INSTRUCTION (SET), INSTRUCTION (IF), INDIRECTION (1), INSTRUCTION (old_ds), INDIRECTION (1), INSTRUCTION (MOVE), INSTRUCTION (pop_ds), STACK CLOSE, INDIRECTION (1), INSTRUCTION (not), INDIRECTION (1), INSTRUCTION (SET)

Instruction types:
IS: (uninitialized)
DS: (uninitialized)
old_ds: (uninitialized)
SET: (uninitialized)
push_ds: (uninitialized)
1: (uninitialized)
new_ds: (uninitialized)
MOVE: (uninitialized)
IF: (uninitialized)
pop_ds: (uninitialized)
not: (uninitialized)

IS (backwards for better readability):
[[[DS. old_ds. SET push_ds. 1. []. DS. new_ds. SET old_ds. DS. SET new_ds. MOVE new_ds. DS. SET IF. old_ds. MOVE pop_ds]. not. SET]]

Running a program ...
